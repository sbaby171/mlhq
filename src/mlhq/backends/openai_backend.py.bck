from __future__ import annotations
from typing import Any, Optional
from openai import OpenAI
from .base import Backend, ResponsesAPI, ChatAPI, ChatCompletionsAPI

# ----- responses adapter -----
class _OpenAIResponses(ResponsesAPI):
    def __init__(self, client: OpenAI): self._client = client
    def create(self, **kwargs: Any) -> Any:
        return self._client.responses.create(**kwargs)

# ----- chat.completions adapter -----
class _OpenAIChatCompletions(ChatCompletionsAPI):
    def __init__(self, client: OpenAI): self._client = client
    def create(self, **kwargs: Any) -> Any:
        # forwards to official SDK:
        # client.chat.completions.create(...)
        return self._client.chat.completions.create(**kwargs)

class _OpenAIChat(ChatAPI):
    def __init__(self, client: OpenAI):
        self._completions = _OpenAIChatCompletions(client)
    @property
    def completions(self) -> ChatCompletionsAPI:
        return self._completions

# ----- top-level backend -----
class OpenAIBackend(Backend):
    def __init__(
        self,
        *,
        api_key: Optional[str] = None,
        base_url: Optional[str] = None,
        organization: Optional[str] = None,
        project: Optional[str] = None,
        **extra: Any,
    ) -> None:
        self._inner = OpenAI(
            api_key=api_key,
            base_url=base_url,
            organization=organization,
            project=project,
        )
        self._responses = _OpenAIResponses(self._inner)
        self._chat = _OpenAIChat(self._inner)

    @property
    def responses(self) -> ResponsesAPI:
        return self._responses

    @property
    def chat(self) -> ChatAPI:
        return self._chat

